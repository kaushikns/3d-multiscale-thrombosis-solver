/***************************************************************************
 *   Copyright (C) 2008 by BEEKHOF, Fokko                                  *
 *   fpbeekhof@gmail.com                                                   *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

#ifndef CVMLCPP_HOLDER
#define CVMLCPP_HOLDER 1

#include <exception>
#include <iostream>

#include <tr1/memory>

namespace cvmlcpp
{

template <class BaseClass, class Factory>
class Holder
{
	public:
		typedef std::tr1::shared_ptr<BaseClass> BasePtr;
		typedef std::tr1::shared_ptr<const BaseClass> ConstBasePtr;

		Holder() {}
		Holder(BasePtr ptr) : ptr_(ptr) {}
		Holder(BaseClass *ptr) : ptr_(ptr) {}

		BasePtr &operator()() { return ptr_; }
		const BasePtr &operator()() const { return ptr_; }
// 		const ConstBasePtr operator()() const
// 		{ return static_cast<ConstBasePtr &>(ptr_); }

		template <class DerivedClass> DerivedClass& cast()
		{ return *dynamic_cast<DerivedClass *>(ptr_.get()); }

		template <class DerivedClass> const DerivedClass &cast() const
		{ return *dynamic_cast<DerivedClass *>(ptr_.get()); }

	private:
		BasePtr ptr_;
};

class ParseError : public std::exception
{
	virtual const char* what() const throw()
	{ return "Parse error in Factory class."; }
};

} // end namespace

template <class BaseClass, class Factory>
std::istream& operator>>(std::istream& i_stream,
			 cvmlcpp::Holder<BaseClass, Factory> &holder)
	throw(cvmlcpp::ParseError)
{
	Factory factory;

	holder = cvmlcpp::Holder<BaseClass, Factory>(factory(i_stream));
	return i_stream;
}

template <class BaseClass, class Factory>
std::ostream& operator<<(std::ostream& o_stream,
			 const cvmlcpp::Holder<BaseClass, Factory> &holder)
{
	o_stream << (*holder());
	return o_stream;
}

#endif
