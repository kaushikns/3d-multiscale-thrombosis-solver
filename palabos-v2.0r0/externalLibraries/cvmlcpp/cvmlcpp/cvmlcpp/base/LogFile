//      LogFile
//      
//      Copyright 2010 F. Beekhof <fpbeekhof@gmail.com>
//      
//      This program is free software; you can redistribute it and/or modify
//      it under the terms of the GNU General Public License as published by
//      the Free Software Foundation; either version 2 of the License, or
//      (at your option) any later version.
//      
//      This program is distributed in the hope that it will be useful,
//      but WITHOUT ANY WARRANTY; without even the implied warranty of
//      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//      GNU General Public License for more details.
//      
//      You should have received a copy of the GNU General Public License
//      along with this program; if not, write to the Free Software
//      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
//      MA 02110-1301, USA.

#ifndef CVMLCPP_LOG
#define CVMLCPP_LOG 1

//#include <iostream>
#include <string>
#include <fstream>
#include <ctime>

//namespace cvmlcpp { class LogFile; }

//template <typename T>
//cvmlcpp::LogFile & operator<<(cvmlcpp::LogFile &log, const T partial_msg);

namespace cvmlcpp
{

class LogFile
{
	public:
//		template <typename T>
//		friend LogFile & ::operator<<(LogFile &log, const T partial_msg);
		LogFile() { }

		LogFile(std::string log_file_name) : 
			log_file_(log_file_name.c_str()) { }

		~LogFile() { log_file_.close(); }
		
		bool open(std::string log_file_name)
		{
			log_file_.close();
			log_file_.open(log_file_name.c_str());
			return this->ok();
		}

		bool ok() const { return log_file_.good(); }

		template <typename T>		
		bool operator ()(const T msg)
		{
			if (!header())
				return false;
			log_file_ << msg << std::endl;
			return this->ok();
		}
		
		bool header()
		{
			log_file_ << "[" << std::time(0) << "] ";
			return this->ok();
		}

		template <typename T>
		LogFile &operator<<(const T partial_msg)
		{
			log_file_ << partial_msg;
			return *this;
		}
	
	private:
		std::ofstream log_file_;
};

} // end namespace cvmlcpp
/*
template <typename T>
cvmlcpp::LogFile &operator<<(cvmlcpp::LogFile &log, const T partial_msg)
{
	log.log_file_ << partial_msg;
	return log;
}
*/
#endif
