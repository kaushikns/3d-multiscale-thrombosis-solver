/***************************************************************************
 *   Copyright (C) 2007 by BEEKHOF, Fokko                                  *
 *   fpbeekhof@gmail.com                                                   *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

#ifndef CVMLCPP_GEOMETRY_TOOLS
#define CVMLCPP_GEOMETRY_TOOLS 1

#include <cvmlcpp/base/Matrix>
#include <cvmlcpp/volume/Geometry>
#include <cvmlcpp/volume/Voxelizer>
#include <cvmlcpp/volume/SurfaceExtractor>

namespace cvmlcpp
{

/*
template <typename T>
bool verify(const Geometry<T> &geometry);
*/

/**
 * Fix a broken geometry.
 */
template <typename T>
void fixGeometry(Geometry<T> &geometry, const double sampleSize = 1.0)
{
	Matrix<unsigned char, 3> voxels;

	// Robust voxelization; pad 1 cell, inside = 2
	Voxelizer<double>::voxelize(geometry, matrix, sampleSize, 1u, 2u);

	// Remove old data
	geometry.clear();

	// Recreate geometry from voxels.
	SurfaceExtractor<double>::extract(matrix, geometry, 1u);

	// Scale back to original size
	if (sampleSize != T(1.0))
		geometry.scale(T(1.0) / sampleSize);
}

} // namespace

#endif
