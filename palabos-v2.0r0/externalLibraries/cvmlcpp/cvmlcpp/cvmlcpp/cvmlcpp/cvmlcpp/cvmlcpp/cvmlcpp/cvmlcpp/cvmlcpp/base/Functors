/***************************************************************************
 *   Copyright (C) 2007 by BEEKHOF, Fokko                                  *
 *   fpbeekhof@gmail.com                                                   *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

#ifndef CVMLCPP_FUNCTORS
#define CVMLCPP_FUNCTORS 1

#include <algorithm>
#include <functional>
#include <iostream>
#include <complex>

namespace cvmlcpp
{

template <typename TSrc, typename TDest>
struct StaticCaster;

template <typename T>
class Printer;

/**
 * Functors for std::pair
 */

// Select "first" from a pair<>
template <typename T1, typename T2>
struct Select1st;

// Select "second" from a pair<>
template <typename T1, typename T2>
struct Select2nd;

/*
 * Variants on the "bool ? trueValue : falseValue" construction
 */

// For input that is itself boolean
template <typename R>
class Chooser1;

// For unary functors returning a boolean
template <typename T, typename R, class Operator>
class Chooser1op;

// For binary functors returning a boolean
template <typename T, typename R, class Operator>
class Chooser2op;

template <typename T>
struct roughly_equal_to;

/**
 * Binary operators
 */

template <typename T>
struct binary_and;

template <typename T>
struct binary_or;

template <typename T>
struct binary_xor;

template <typename T>
struct binary_not;

/**
 * Functors for container-like Vectors
 */

template <typename Vector, typename register_type = typename Vector::value_type>
class Rotator3D;

/**
 * Math
 */

// A linear function: y = a*x + b
template <typename T>
class LinearFunc;

// A quadratic function: y = a*x^2 + b*x + c
template <typename T>
class QuadraticFunc;

// Gaussian Normal
template <typename T>
class Gaussian;

// Clamp a value in a range
template <typename T>
class Clamp;

// x^2
template <typename T>
struct Square;

// Derivative of a function, numerical
template <class Function>
class Derivative;

/*
 * Functors that operate on containers. Should remain undocumented until it is
 * clear that this does not duplicate functionality offered by BOOST.
 */

template <typename Container>
struct ContainerSorter;

template <class Container, class Operator>
class UnaryOperateInserter;

template <class Container, class Operator>
class BinaryOperateInserter;

template <class Map, class Operator>
class MapPairInserter;

template <class Map, class Operator>
class MapPairOperateInserter;

/*
template <typename T, typename U, class Operator>
class PairFirstBinaryOperator : public std::binary_function<T, T, bool>
{
	public:
		PairFirstBinaryOperator() {}

		bool operator()(const std::pair<T, U> &lhs,
				const std::pair<T, U> &rhs)
		{ return _op(lhs.first, rhs.first); }

	private:
		Operator _op;
};
*/

template <typename T, typename U, class Operator>
class PairFirstCompare;


/*
 * Nesting allows a kind of preprocessing.
 */
/*
template <class Inner, class Outer, typename T, typename U>
class Nest1;

template <class Inner, class Outer, typename T, typename U>
class Nest2;
*/

} // namespace

#include <cvmlcpp/base/Functors.hpp>

#endif
