/***************************************************************************
 *   Copyright (C) 2007 by BEEKHOF, Fokko                                  *
 *   fpbeekhof@gmail.com                                                   *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

#ifndef CVMLCPP_VOLUMEIO
#define CVMLCPP_VOLUMEIO 1

#include <string>

#include <cvmlcpp/array/ArrayIO>
#include <cvmlcpp/volume/Geometry>

namespace cvmlcpp
{
 	template <typename T>
 	bool writeSTL(const Geometry<T> &geometry, const std::string fileName,
 			const bool binary = true);

	template <typename T>
	bool readSTL(Geometry<T> &geometry, const std::string fileName);

	template <template <typename Tm, std::size_t D, typename A> class Array,
		  typename T, std::size_t N, typename Aux>
	bool writeVoxels(const Array<T, N, Aux> &voxels,
			 const std::string fileName,
			 const bool compress = true)
	{ return writeArray(voxels, fileName, compress); }

	template <template <typename Tm, std::size_t D, typename A> class Array,
		  typename T, std::size_t N, typename Aux>
	bool readVoxels(Array<T, N, Aux> &voxels, const std::string fileName)
	{ return readArray(voxels, fileName); }
}

#include <cvmlcpp/volume/VolumeIO.hpp>

#endif
