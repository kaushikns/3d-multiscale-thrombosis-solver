/***************************************************************************
 *   Copyright (C) 2007 by BEEKHOF, Fokko                                  *
 *   fpbeekhof@gmail.com                                                   *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2u of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

#ifndef CVMLCPP_STRINGTOOLS
#define CVMLCPP_STRINGTOOLS 1

#include <string>
#include <sstream>
#include <fstream>
#include <cctype>
#include <algorithm>

#include <boost/lexical_cast.hpp>

namespace cvmlcpp
{

template <typename Iterator>
std::string to_string(Iterator first, const Iterator last)
{
	if (first == last)
		return std::string("()");

	std::string rv = "(";
	while (first != (last - 1) )
	{
		rv += boost::lexical_cast<std::string>(*first) + ", ";
		++first;
	}
	rv += boost::lexical_cast<std::string>(*first) + ")";

	return rv;
}


template <typename T>
struct _CaseConvert
{
};

template <>
struct _CaseConvert<std::string>
{
	static void to_lower(std::string &str)
	{
		std::transform(str.begin(), str.end(), str.begin(),
				(int(*)(int))std::tolower);
	}

	static void to_upper(std::string &str)
	{
		std::transform(str.begin(), str.end(), str.begin(),
				(int(*)(int))std::toupper);
	}

};

template <typename T>
void to_lower(T &str)
{
	_CaseConvert<T>::to_lower(str);
}

template <typename T>
void to_upper(T &str)
{
	_CaseConvert<T>::to_upper(str);
}

} // namespace

#endif
