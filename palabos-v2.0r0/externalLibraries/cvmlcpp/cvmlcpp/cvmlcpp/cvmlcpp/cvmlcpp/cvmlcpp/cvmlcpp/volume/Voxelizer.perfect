/***************************************************************************
 *   Copyright (C) 2007, 2008 by F. P. Beekhof                             *
 *   fpbeekhof@gmail.com                                                   *
 *                                                                         *
 *   This program is axis software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with program; if not, write to the                              *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

#include <omptl/omptl_algorithm>

#include <cmath>
#include <cassert>
#include <base/stl_cstdint.h>

#include <base/Enums>
#include <base/Functors>
#include <base/Matrix>
#include <volume/Geometry>


/*
 * ############# NOTES #############
 *
 * Essentially, the code calculates intersections of rays along all three axes
 * (X, Y and Z) and facets of a geometry. The code for all three axes is the
 * same, but we always pretend to calculate a Z-coordinate for a given facet
 * and X and Y coordinates. The axes are renamed to obtain the desired
 * projection. The variables "axis" and "_dm" govern this renaming.
 *
 * A voxel is considered "inside" or "part of" the geometry if it is found
 * to be inside for at least 2 projections along the X, Y and Z axes.
 *
 * VoxelOffsets are fractions of voxels, i.e. always a number between [0-1].
 *
 * The Z-Buffer contains real (continuous) values in Matrix-space.
 */


namespace cvmlcpp
{

template <typename vector_type, unsigned axis>
void _zBuffersToData(Matrix<unsigned char, 3u> &count,
	const double voxelSize, const Matrix<std::vector<double>, 2u> &zBuffer,
	const vector_type &subVoxOffset, const unsigned pad)
{
	const unsigned _dm[][4] =
	{
		{Z, Y, X, 0u},
		{X, Z, Y, 0u},
		{X, Y, Z, 0u}
	};

	// Sane input ?
	assert(axis < 3u);
 	for (unsigned i = 0u; i < 3; ++i)
	{
		assert(subVoxOffset[i] > 0.0);
		assert(subVoxOffset[i] < 1.0);
	}
	assert(std::find_if(count.begin(), count.end(),
		std::bind2nd(std::greater_equal<unsigned char>(), 3)) ==
			count.end());

#ifdef _OPENMP
	#pragma omp parallel for //default(none)
	for (int      x = 0; x <  int(zBuffer.extent(X)); ++x)
	for (unsigned y = 0; y <      zBuffer.extent(Y);  ++y)
#else
 	for (unsigned x = 0u; x < zBuffer.extent(X); ++x)
 	for (unsigned y = 0u; y < zBuffer.extent(Y); ++y)
#endif
	{
		unsigned v     = 0u; // Value 0: we begin outside the geometry
		unsigned begin = 0u; // first element of this line along Z-axis

// For all intersection with facets along the ray through these X,Y coordinates
for (typename Matrix<std::vector<double>, 2u>::value_type::
	const_iterator i = zBuffer[x][y].begin();
	i != zBuffer[x][y].end(); ++i)
{
	assert(*i >= 0.0);

	assert(round_cast<int>(*i) >= 0);
	const unsigned end = pad + round_cast<int>(*i);

	assert(end <= count.extent(_dm[axis][Z]));
	if (v == 1) // If we're inside the geometry ...
		for (unsigned z = begin; z < end; ++z) // ... mark all cells
		{
			// Rename coordinates
			unsigned pi [] = {x, y, z};

			const unsigned xx = pi[_dm[axis][X]];
			const unsigned yy = pi[_dm[axis][Y]];
			const unsigned zz = pi[_dm[axis][Z]];

			assert(xx < count.extent(X));
			assert(yy < count.extent(Y));
			assert(zz < count.extent(Z));

			// Increase value when inside
			++count[xx][yy][zz];
			assert(count[xx][yy][zz] <= 3u);
		}

	v     = 1u - v; // Now we change from inside to outside or vice versa
	begin = end;
}
	}
}

template <typename Tg, class vector_type>
void _buildZBuffer(const Geometry<Tg> &geometry, const double voxelSize,
		  Matrix<std::vector<double>, 2u> &zBuffer,
		  const vector_type &subVoxOffset,
		  const unsigned pad, const unsigned axis)
{
	typedef typename Geometry<Tg>::point_type  point_type;

	const unsigned _dm[][4] =
	{
		{Z, Y, X, 0u},
		{X, Z, Y, 0u},
		{X, Y, Z, 0u}
	};

	// Sane input ?
	assert(axis < 3u);
 	for (unsigned i = 0u; i < 3; ++i)
	{
		assert(subVoxOffset[i] > 0.0);
		assert(subVoxOffset[i] < 1.0);
		assert(geometry.min(i) >= 0.0);
	}
	assert(voxelSize > 0.0);

	// For all facets ...
	for (typename Geometry<Tg>::const_facet_iterator
	     fIt = geometry.facetsBegin(); fIt != geometry.facetsEnd(); ++fIt)
	{
		// Get normal. Skip perpedicular facets.
		const vector_type normal = fIt->normal();
		const double normalZ = normal[_dm[axis][Z]];

		if (normalZ == 0.0)
			continue;

		// Get the 3 points from facet_type
		point_type p[3];
		for (unsigned j = 0; j < 3; j++)
			p[j] = geometry.point((*fIt)[j]);

		// Order the points by X-coordinate
		for (unsigned k = 0; k < 2; ++k)
			for (unsigned n = k + 1; n < 3; ++n)
				if (p[k][_dm[axis][X]] > p[n][_dm[axis][X]])
					std::swap(p[k], p[n]);
		assert(p[0][_dm[axis][X]] <= p[1][_dm[axis][X]]);
		assert(p[1][_dm[axis][X]] <= p[2][_dm[axis][X]]);

		// Tables of the coordinates of the three points
		// Point 0 is the leftmost point (lowest X coordinate),
		// point 1 the middle, and point 2 the rightmost point.
		const double xt[]   = { p[0][_dm[axis][X]],
					p[1][_dm[axis][X]],
					p[2][_dm[axis][X]] };
		const double yt[]   = { p[0][_dm[axis][Y]],
					p[1][_dm[axis][Y]],
					p[2][_dm[axis][Y]] };
		const double zt[]   = { p[0][_dm[axis][Z]],
					p[1][_dm[axis][Z]],
					p[2][_dm[axis][Z]] };

		// Compute d parameter of plane equation of this facet
		// ax + by + cz + d = 0 (or ax + by + cz = d, I forgot...)
		const double d = dotProduct(normal, p[0]);

// Starting point for voxels is the lowest X-coordinate of a voxel
// (in Voxel coordinates) that falls into the facet.
assert(xt[0] / voxelSize > double(-std::numeric_limits<int>::max()));
assert(xt[0] / voxelSize < double( std::numeric_limits<int>::max()));
int xStart = int(std::floor(xt[0] / voxelSize));
for (int xi = xStart; true; ++xi) // xi is in integer Voxel coordinates
{
	// Translate integer voxel coordinate back to facet coordinate.
	// Include subVoxelOffset to obtain sampling point inside voxel.
	const double x = voxelSize * (double(xi) + subVoxOffset[_dm[axis][X]]);

	// Due to the "floor" and numerical issues, we may start too soon
	assert(xt[0] <= xt[2]);
	if (x < xt[0])
		continue;

	assert(x >= 0.0);

	// Stop if we are more to the right than the right-most point.
	if (x >= xt[2])
		break;

	// Compute low and high Y-borders from line equation y = ax + b. Use
	// lines p0-p1 and p0-p2; or p1-p2 and p0-p2.
	const unsigned pi = static_cast<unsigned>(x >= xt[1]);
	assert(pi < 2u);

	// Robustness: Facet can be a line
	if (!(std::abs(xt[pi+1] - xt[pi]) > 0.0))
	{
		assert(!(std::abs(xt[2] - xt[0]) > 0.0));
		continue;
	}

	// y0 is lowest Y-coordinate and y1 the highest Y-coordinate
	// given this x coordinates of the facet projected along the Z-axis
	assert(std::abs(xt[pi+1] - xt[pi]) > 0.0);
	double y0 = yt[pi] + (x - xt[pi]) * (yt[pi + 1] - yt[pi]) /
				// ------------------------------------
					(xt[pi + 1] - xt[pi]);

	assert(std::abs(xt[2] - xt[0]) > 0.0);
	double y1 = yt[0] + (x - xt[0]) * (yt[2] - yt[0]) /
				//-----------------------------
					   (xt[2] - xt[0]);

	if (y0 > y1) // Sort to get the order right
		std::swap(y0, y1);

	// If there is numerical trouble we cannot determine the edges of the
	// facet, so there isn't much useful we can do.
	if (!(y0 <= y1))
		continue;

	assert(y0 <= y1); // Numerical trouble ?

	assert(y0 >= 0.0);
	assert(y1 >= 0.0);

	// We will need this value later. It's part of the plane equation
	const double dnx = d - normal[_dm[axis][X]] * x;

	// Starting point for voxels is the lowest Y-coordinate of a voxel
	// (in voxel coordinate-space) that falls into the facet.
	assert(y0 / voxelSize > double(-std::numeric_limits<int>::max()));
	assert(y0 / voxelSize < double( std::numeric_limits<int>::max()));
	const int yStart = int(std::floor(y0 / voxelSize));
	for (int yi = yStart; true; ++yi) // yi is in integer voxel coordinates
	{
		const double y = voxelSize *
				(double(yi) + subVoxOffset[_dm[axis][Y]]);

		// Due to "floor" and numerical issues, we may start too soon
		if (y < y0)
			continue;

		assert(y >= 0.0);

		// If we walk out of the facet, we are done
		if (y >= y1)
			break;

		// Derive Z from plane equation ax + by + cz = d;
		// where a, b, c form the plane normal.
		// dnx is a precomputed part (optimization: loop hoisting)
		double z = (dnx - normal[_dm[axis][Y]] * y) /
				//------------------------------------
					normal[_dm[axis][Z]];

		// If z is NaN, take average of Z-coordinates of points of facet
		if ( !(z <= 0.0) && !(z >= 0.0) ) // NaN
			z = (zt[0] + zt[1] + zt[2]) / 3.0;

		// Clamp inbetween legal values (this should be optimized)
		assert(z >= min(zt[0], zt[1], zt[2]));
		assert(z <= max(zt[0], zt[1], zt[2]));
		z = clamp(z, min(zt[0],zt[1],zt[2]), max(zt[0],zt[1],zt[2]));

		assert(z >= 0.0f);

		// Compute indices in the matrix (matrix coordinates)
		assert(xi + int(pad) >= 0);
		assert(yi + int(pad) >= 0);
		const unsigned xIndex = xi + pad;
		const unsigned yIndex = yi + pad;

		assert(xIndex < zBuffer.extent(X));
		assert(yIndex < zBuffer.extent(Y));

		// z-coordinate in real (continuous) matrix coordinates
		const double voxelZ = z / voxelSize;

		// Add the intersection of the line though (xi, yi) and the
		// facet to the buffer of intersections.
		zBuffer[xIndex][yIndex].push_back( voxelZ );
	}
}
	}

	// sort zBuffers to obtain right order of passing through facets
	ContainerSorter<std::vector<double> > sorter;
	omptl::for_each(zBuffer.begin(), zBuffer.end(), sorter);

}

template <template <typename Tm, std::size_t D, typename Aux> class Matrix_t,
	typename Ti, typename Tg, typename A, class vector_type>
bool _voxelize(const Geometry<Tg>  &geometry,
	Matrix_t<Ti, 3u, A> &matrix, const double voxelSize,
	const unsigned pad, const Ti inside, const Ti outside,
	const vector_type &subVoxOffset)
{
	typedef Ti voxel_type;
	typedef array_traits<Matrix_t, Ti, 3u, A> MTraits;

	const unsigned _dm[][4] =
	{
		{Z, Y, X, 0},
		{X, Z, Y, 0},
		{X, Y, Z, 0}
	};

	if (!(voxelSize > 0.0f))
	{
		std::cout << "Invalid voxel size!" << std::endl;
		return false;
	}

	Geometry<Tg> g = geometry;
	assert(g == geometry);
	g.translate(-geometry.min(X), -geometry.min(Y), -geometry.min(Z));

	// Dimensions of the Voxel Matrix
	const unsigned dimensions [] = {
		unsigned((std::ceil(g.max(X) / voxelSize)) + 2u*pad + 1u),
		unsigned((std::ceil(g.max(Y) / voxelSize)) + 2u*pad + 1u),
		unsigned((std::ceil(g.max(Z) / voxelSize)) + 2u*pad + 1u) };

	// Geometry without volume ?
	if ( std::accumulate(dimensions, dimensions+3, 0u) < (3u + 2u*pad) )
		return true;

	assert(dimensions[X] >= 1u + 2u*pad);
	assert(dimensions[Y] >= 1u + 2u*pad);
	assert(dimensions[Z] >= 1u + 2u*pad);

	// Set number of times a location is considered to be inside to zero.
	Matrix<unsigned char, 3u> count(dimensions, 0u);
	typedef typename Matrix<unsigned char, 3u>::value_type count_type;

	/*
	 * Take snapshots from 3 perspectives.
	 */
	for (unsigned axis = 0; axis < 3; ++axis)
	{
		const unsigned dims [] = { dimensions[_dm[axis][X]],
					   dimensions[_dm[axis][Y]] };

		Matrix<std::vector<double>, 2u> zBuffer(dims);
		for (unsigned x = 0u; x < dims[X]; ++x)
		for (unsigned y = 0u; y < dims[Y]; ++y)
			assert(zBuffer[x][y].empty());

		// Build Z-Buffer using projection along given axis 
		_buildZBuffer(g, voxelSize, zBuffer,
				subVoxOffset, pad, axis);

		// Sanity: nr of intersections per X,Y less-equal nr of facets
		for (unsigned x = 0u; x < dims[X]; ++x)
		for (unsigned y = 0u; y < dims[Y]; ++y)
			assert(zBuffer[x][y].size() <= geometry.nrFacets());

		// Apply appropriate voxel count, using switch to apply template
		switch(axis)
		{
			case X: _zBuffersToData<vector_type, X>
						(count, voxelSize, zBuffer,
						 subVoxOffset, pad);
				break;
			case Y: _zBuffersToData<vector_type, Y>
						(count, voxelSize, zBuffer,
						 subVoxOffset, pad);
				break;
			case Z: _zBuffersToData<vector_type, Z>
						(count, voxelSize, zBuffer,
						 subVoxOffset, pad);
				break;
			default: assert(false);
		}
	}

	// Resize matrix
	MTraits::resize(matrix, dimensions);

	// Majority voting: inside if count >= 2; otherwise outside
	typedef Chooser1op<voxel_type, count_type,
	std::binder2nd<std::less<count_type> > > VoxelChooser;

	omptl::transform(count.begin(), count.end(), MTraits::begin(matrix),
			 VoxelChooser(std::bind2nd(std::less<count_type>(), 2),
					outside, inside) );

	return true;
}

template <template <typename Tm, std::size_t D, typename Aux> class Matrix_t,
	typename Ti, typename Tg, typename A>
bool voxelize(const Geometry<Tg>  &geometry,
	Matrix_t<Ti, 3u, A> &matrix, const double voxelSize,
	const unsigned pad=0u, const Ti inside=1, const Ti outside=0)
{
	const typename Geometry<Tg>::vector_type subVoxOffset = 0.5;
	return _voxelize(geometry, matrix, voxelSize, pad, inside, outside,
			 subVoxOffset);
}

template <template <typename Tm, std::size_t D, typename Aux> class Matrix_t,
	typename Tf, typename Tg, typename A>
bool fractionVoxelize(const Geometry<Tg>  &geometry,
	Matrix_t<Tf, 3u, A> &matrix, const double voxelSize,
	const unsigned samples = 16u, const unsigned pad=0u)
{
	assert(samples > 0u);
	const double sampleOffset = 1.0 / double(samples) / 2.0;

	cvmlcpp::Matrix<unsigned, 3> voxelCount;
	assert(voxelCount.size() == 0);

	typename Geometry<Tg>::vector_type subVoxOffset;
	for (unsigned x = 0u; x < samples; ++x)
	for (unsigned y = 0u; y < samples; ++y)
	for (unsigned z = 0u; z < samples; ++z)
	{
		subVoxOffset[X] = sampleOffset + double(x) / double(samples);
		subVoxOffset[Y] = sampleOffset + double(y) / double(samples);
		subVoxOffset[Z] = sampleOffset + double(z) / double(samples);

		for (unsigned i = 0u; i < 3; ++i)
		{
			assert(subVoxOffset[i] >= 0.0);
			assert(subVoxOffset[i] <= 1.0);
		}

		cvmlcpp::Matrix<unsigned char, 3> voxels;
		const unsigned char outside = 0;
		const unsigned char  inside = 1;
		if (!_voxelize(geometry, voxels, voxelSize, pad,
				inside, outside, subVoxOffset))
			return false;

		if (voxelCount.size() == 0)
		{
			voxelCount.resize(voxels.extents());
			voxelCount = 0u;
		}
		else if (!std::equal(voxels.extents(), voxels.extents() + 3,
					voxelCount.extents()))
			voxelCount.resize(voxels.extents());

		// Increase count for inside voxels
		omptl::transform(voxelCount.begin(), voxelCount.end(),
				 voxels.begin(), voxelCount.begin(),
				 std::plus<unsigned>());
	}

	array_traits<Matrix_t, Tf, 3u, A>::resize(matrix, voxelCount.extents());

	// Divide count (per voxel) by number of samples (per voxel)
	const double scaleFactor = 1.0 / std::pow(double(samples), 3.0);
	omptl::transform(voxelCount.begin(), voxelCount.end(), matrix.begin(),
			 std::bind2nd(std::multiplies<Tf>(), scaleFactor) );

	return true;
}

} // namespace
